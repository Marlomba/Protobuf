// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: proto/grps.proto

package grps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LiveViewReturn_ServiceYouTube_FullMethodName  = "/LiveView.LiveViewReturn/ServiceYouTube"
	LiveViewReturn_Servicetelegram_FullMethodName = "/LiveView.LiveViewReturn/Servicetelegram"
)

// LiveViewReturnClient is the client API for LiveViewReturn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveViewReturnClient interface {
	// агент youtuba
	ServiceYouTube(ctx context.Context, in *RequestGetData, opts ...grpc.CallOption) (*ResponseStreamData, error)
	// агент telegram
	Servicetelegram(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ResponseData, error)
}

type liveViewReturnClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveViewReturnClient(cc grpc.ClientConnInterface) LiveViewReturnClient {
	return &liveViewReturnClient{cc}
}

func (c *liveViewReturnClient) ServiceYouTube(ctx context.Context, in *RequestGetData, opts ...grpc.CallOption) (*ResponseStreamData, error) {
	out := new(ResponseStreamData)
	err := c.cc.Invoke(ctx, LiveViewReturn_ServiceYouTube_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveViewReturnClient) Servicetelegram(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ResponseData, error) {
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, LiveViewReturn_Servicetelegram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveViewReturnServer is the server API for LiveViewReturn service.
// All implementations must embed UnimplementedLiveViewReturnServer
// for forward compatibility
type LiveViewReturnServer interface {
	// агент youtuba
	ServiceYouTube(context.Context, *RequestGetData) (*ResponseStreamData, error)
	// агент telegram
	Servicetelegram(context.Context, *RequestData) (*ResponseData, error)
	mustEmbedUnimplementedLiveViewReturnServer()
}

// UnimplementedLiveViewReturnServer must be embedded to have forward compatible implementations.
type UnimplementedLiveViewReturnServer struct {
}

func (UnimplementedLiveViewReturnServer) ServiceYouTube(context.Context, *RequestGetData) (*ResponseStreamData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceYouTube not implemented")
}
func (UnimplementedLiveViewReturnServer) Servicetelegram(context.Context, *RequestData) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Servicetelegram not implemented")
}
func (UnimplementedLiveViewReturnServer) mustEmbedUnimplementedLiveViewReturnServer() {}

// UnsafeLiveViewReturnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveViewReturnServer will
// result in compilation errors.
type UnsafeLiveViewReturnServer interface {
	mustEmbedUnimplementedLiveViewReturnServer()
}

func RegisterLiveViewReturnServer(s grpc.ServiceRegistrar, srv LiveViewReturnServer) {
	s.RegisterService(&LiveViewReturn_ServiceDesc, srv)
}

func _LiveViewReturn_ServiceYouTube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveViewReturnServer).ServiceYouTube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveViewReturn_ServiceYouTube_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveViewReturnServer).ServiceYouTube(ctx, req.(*RequestGetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveViewReturn_Servicetelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveViewReturnServer).Servicetelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveViewReturn_Servicetelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveViewReturnServer).Servicetelegram(ctx, req.(*RequestData))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveViewReturn_ServiceDesc is the grpc.ServiceDesc for LiveViewReturn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveViewReturn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LiveView.LiveViewReturn",
	HandlerType: (*LiveViewReturnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceYouTube",
			Handler:    _LiveViewReturn_ServiceYouTube_Handler,
		},
		{
			MethodName: "Servicetelegram",
			Handler:    _LiveViewReturn_Servicetelegram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grps.proto",
}
